{"version":3,"sources":["component/Clicker.tsx","component/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Clicker","state","count","intervalID","increase","addToCount","getCount","decrease","updateCount","n","document","getElementById","value","setCount","resetCounter","fetch","then","response","json","data","setState","method","headers","conetent","body","JSON","stringify","upd","val","this","setInterval","id","className","onClick","Refresh","fontSize","ArrowUpward","ArrowDownward","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gSA6EeA,E,4MAxEXC,MAAQ,CACJC,MAAO,G,EAEXC,gB,IAQAC,SAAW,WACP,EAAKC,WAAW,GAChB,EAAKC,Y,EAGTC,SAAW,WACP,EAAKF,YAAY,GACjB,EAAKC,Y,EAGTE,YAAc,WACV,IACIC,GADKC,SAASC,eAAe,YAAiCC,MAElE,EAAKC,SAASJ,I,EAGlBK,aAAe,WACX,EAAKD,SAAS,GACd,EAAKP,Y,EAGTA,SAAW,WACPS,MAAM,gCAAiC,IAClCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,UAAS,SAACnB,GAAD,MAAY,CAAEC,MAAOiB,EAAKjB,c,EAG9DG,WAAa,SAACI,GACVM,MAAM,uCAAwC,CAC1CM,OAAQ,OACRC,QAAS,CAAEC,SAAU,oBACrBC,KAAMC,KAAKC,UAAU,CAAEC,IAAKlB,O,EAIpCI,SAAW,SAACJ,GACRM,MAAM,sCAAuC,CACzCM,OAAQ,MACRC,QAAS,CAAEC,SAAU,oBACrBC,KAAMC,KAAKC,UAAU,CAAEE,IAAKnB,O,uDA7CpC,WAAqB,IAAD,OAChBoB,KAAK1B,WAAa2B,aACd,kBAAM,EAAKxB,aAAY,O,oBA+C/B,WACI,OACI,sBAAKyB,GAAG,UAAR,UACI,qBAAKC,UAAU,QAAf,uBACA,qBAAKD,GAAG,QAAR,SAAiBF,KAAK5B,MAAMC,QAC5B,sBAAK6B,GAAG,aAAR,UACI,wBAAQA,GAAG,MAAME,QAASJ,KAAKf,aAA/B,SAA6C,cAACoB,EAAA,EAAD,CAASC,SAAS,YAC/D,0BAAUJ,GAAG,aACb,wBAAQA,GAAG,MAAME,QAASJ,KAAKrB,YAA/B,SAA4C,yCAEhD,wBAAQuB,GAAG,MAAME,QAASJ,KAAKzB,SAA/B,SAAyC,cAACgC,EAAA,EAAD,CAAaD,SAAS,YAC/D,wBAAQJ,GAAG,MAAME,QAASJ,KAAKtB,SAA/B,SAAyC,cAAC8B,EAAA,EAAD,CAAeF,SAAS,mB,GAlE3DG,a,MCSPC,MARf,WACE,OACE,qBAAKR,GAAG,OAAR,SACE,cAAC,EAAD,OCMSS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASC,eAAe,SAM1B6B,M","file":"static/js/main.7ad3fad1.chunk.js","sourcesContent":["import { ArrowDownward, ArrowUpward, Refresh } from '@material-ui/icons';\nimport { Component } from 'react'\nimport '../style/Clicker.css';\n\nclass Clicker extends Component {\n    state = {\n        count: 0\n    }\n    intervalID: NodeJS.Timeout | undefined;\n\n    componentDidMount() {\n        this.intervalID = setInterval(\n            () => this.getCount(), 250\n        );\n    }\n\n    increase = () => {\n        this.addToCount(1);\n        this.getCount();\n    }\n\n    decrease = () => {\n        this.addToCount(-1);\n        this.getCount();\n    }\n\n    updateCount = () => {\n        let s = (document.getElementById(\"textArea\") as HTMLInputElement).value;\n        let n = +s;\n        this.setCount(n);\n    }\n\n    resetCounter = () => {\n        this.setCount(0);\n        this.getCount();\n    }\n\n    getCount = () => {\n        fetch(\"http://localhost:8080/counter\", {})\n            .then(response => response.json())\n            .then(data => this.setState((state) => ({ count: data.count })));\n    }\n\n    addToCount = (n: number) => {\n        fetch(\"http://localhost:8080/counter/update\", {\n            method: 'POST',\n            headers: { conetent: \"application/json\" },\n            body: JSON.stringify({ upd: n })\n        });\n    }\n\n    setCount = (n: number) => {\n        fetch(\"http://localhost:8080/counter/reset\", {\n            method: 'PUT',\n            headers: { conetent: \"application/json\" },\n            body: JSON.stringify({ val: n })\n        });\n    }\n\n    render() {\n        return (\n            <div id=\"clicker\">\n                <div className=\"title\">/dclicker</div>\n                <div id=\"count\">{this.state.count}</div>\n                <div id=\"horizontal\">\n                    <button id=\"upd\" onClick={this.resetCounter}><Refresh fontSize=\"large\" /></button>\n                    <textarea id=\"textArea\"></textarea>\n                    <button id=\"set\" onClick={this.updateCount}><b>SET</b></button>\n                </div>\n                <button id=\"inc\" onClick={this.increase}><ArrowUpward fontSize=\"large\" /></button>\n                <button id=\"dec\" onClick={this.decrease}><ArrowDownward fontSize=\"large\" /></button>\n            </div>\n        );\n    }\n}\n\n\nexport default Clicker","import React from 'react';\nimport '../style/App.css';\nimport Clicker from './Clicker';\nimport '@fontsource/roboto';\n\nfunction App() {\n  return (\n    <div id=\"main\">\n      <Clicker />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './component/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}